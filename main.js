// Ïú†Ï†ÄÍ∞Ä Í∞íÏùÑ ÏûÖÎ†•ÌïúÎã§
// +Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÎ©¥, Ìï†ÏùºÏù¥ Ï∂îÍ∞ÄÎêúÎã§
// deleteÎ≤ÑÌäºÏùÑ ÎàÑÎ•¥Î©¥ Ìï†ÏùºÏù¥ ÏÇ≠Ï†úÎêúÎã§
// check Î≤ÑÌäºÏùÑ ÎàÑÎ•¥Î©¥ Ìï†ÏùºÏù¥ ÎÅùÎÇòÎ©¥ÏÑú Î∞ëÏ§ÑÏù¥ Í∞ÑÎã§
//1. check Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÎäî ÏàúÍ∞Ñ true false
//2. trueÏù¥Î©¥ ÎÅùÎÇúÍ±∏Î°ú Í∞ÑÏ£ºÌïòÍ≥† Î∞ëÏ§Ñ Î≥¥Ïó¨Ï£ºÍ∏∞
//3. falseÏù¥Î©¥ ÏïàÎÅùÎÇúÍ±∏Î°ú Í∞ÑÏ£ºÌïòÍ≥† Í∑∏ÎåÄÎ°ú
// ÏßÑÌñâ Ï§ë ÎÅùÎÇ® ÌÉ≠ÏùÑ ÎàÑÎ•¥Î©¥, Ïñ∏ÎçîÎ∞îÍ∞Ä Ïù¥ÎèôÌïúÎã§
// ÎÅùÎÇ® ÌÉ≠ÏùÄ, ÎÅùÎÇú ÏïÑÏù¥ÌÖúÎßå, ÏßÑÌñâÏ§ëÌÉ≠ÏùÄ ÏßÑÌñâÏ§ëÏù∏ ÏïÑÏù¥ÌÖúÎßå ÎÇòÏò®Îã§
// Ï†ÑÏ≤¥ ÌÉ≠ÏùÑ ÎàÑÎ•¥Î©¥ Îã§Ïãú Ï†ÑÏ≤¥ ÏïÑÏù¥ÌÖúÏúºÎ°ú ÎèåÏïÑÏò¥

let taskInput = document.getElementById("task-input");
let addButton = document.getElementById("add-button");
let tabs = document.querySelectorAll(".task-tabs div");
let underLine = document.getElementById("under-line");
let underLineMenu = document.querySelectorAll(".task-tabs div");
let taskList = [];
let mode = "all";
let filterList = [];

addButton.addEventListener("click", addTask);

underLineMenu.forEach((menu) =>
  menu.addEventListener("click", (e) => underLineIndicator(e))
);

function underLineIndicator(e) {
  underLine.style.left = e.currentTarget.offsetLeft + "px";
  underLine.style.width = e.currentTarget.offsetWidth + "px";
  underLine.style.top =
    e.currentTarget.offsetTop + e.currentTarget.offsetHeight + "px";
}

for (let i = 1; i < tabs.length; i++) {
  tabs[i].addEventListener("click", function (event) {
    filter(event);
  });
}

taskInput.addEventListener("keydown", function (event) {
  // ÏóîÌÑ∞ ÌÇ§ (ÌÇ§ ÏΩîÎìú 13)Í∞Ä ÎàåÎ†∏ÏùÑ Îïå addTask Ìï®Ïàò Ìò∏Ï∂ú
  if (event.keyCode === 13) {
    addTask();
  }
});

function addTask() {
  const inputValue = taskInput.value.trim();
  if (inputValue === "") {
    // Îπà Í∞íÏù¥Î©¥ ÏïåÎ¶ºÏ∞Ω ÎùÑÏö∞Í≥† Ìï®Ïàò Ï¢ÖÎ£å
    alert("Í∏∞Î°ùÌïòÍ≥† Ïã∂ÏùÄ ÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.");
    return;
  }
  let task = {
    id: randomIDGenerate(),
    taskContent: taskInput.value,
    isComplete: false,
  };
  taskList.push(task);
  render();

  taskInput.value = "";
  taskInput.placeholder = "üìì Ìï¥ÏïºÌï† Ïùº Í∏∞Î°ùÌïòÍ∏∞";
}

function render() {
  let list = [];

  if (mode === "all") {
    list = taskList;
  } else if (mode === "ongoing" || mode === "done") {
    list = filterList;
  }

  let resultHTML = "";
  for (let i = 0; i < list.length; i++) {
    if (list[i].isComplete == true) {
      resultHTML += `<div class="task">
        <div class="task-done">${list[i].taskContent}</div>
        <div class="btn-area">
            <i class="fas fa-square-caret-left refresh-btn" onClick="refreshTask('${list[i].id}')"></i>
            <i class="far fa-minus-square delete-btn" onClick="deleteTask('${list[i].id}')"></i>
        </div>
      </div>`;
    } else {
      resultHTML += `<div class="task">
            <div>${list[i].taskContent}</div>
            <div class="btn-area">
              <i class="far fa-check-square check-btn" onClick="toggleComplete('${list[i].id}')"></i>
              <i class="far fa-minus-square delete-btn" onClick="deleteTask('${list[i].id}')"></i>
            </div>
          </div>`;
    }
  }
  document.getElementById("task-board").innerHTML = resultHTML;

  updateTabCounts(); // ÌÉ≠ ÏòÜÏóê Í∞ØÏàò ÏóÖÎç∞Ïù¥Ìä∏
}

function updateTabCounts() {
  let allCount = taskList.length;
  let ongoingCount = taskList.filter((task) => !task.isComplete).length;
  let doneCount = taskList.filter((task) => task.isComplete).length;

  document.getElementById("all").textContent = `Ï†ÑÏ≤¥(${allCount})`;
  document.getElementById("ongoing").textContent = `ÏßÑÌñâ Ï§ë(${ongoingCount})`;
  document.getElementById("done").textContent = `ÏôÑÎ£å(${doneCount})`;
}

function toggleComplete(id) {
  for (let i = 0; i < taskList.length; i++) {
    if (taskList[i].id === id) {
      taskList[i].isComplete = !taskList[i].isComplete;

      if (mode === "ongoing") {
        filterList = filterList.filter((task) => task.id !== id);
        if (!taskList[i].isComplete) {
          filterList.push(taskList[i]);
        }
      }

      break;
    }
  }
  render();
}

function deleteTask(id) {
  let isConfirmed = window.confirm("Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?");

  if (isConfirmed) {
    for (let i = 0; i < taskList.length; i++) {
      if (taskList[i].id == id) {
        taskList.splice(i, 1);
        break;
      }
    }

    filterList = filterList.filter((task) => task.id !== id);

    render();
  }
}

function filter(event) {
  mode = event.target.id;
  filterList = [];

  if (mode === "all") {
    render();
  } else if (mode === "ongoing") {
    for (let i = 0; i < taskList.length; i++) {
      if (taskList[i].isComplete === false) {
        filterList.push(taskList[i]);
      }
    }
    render();
  } else if (mode === "done") {
    for (let i = 0; i < taskList.length; i++) {
      if (taskList[i].isComplete === true) {
        filterList.push(taskList[i]);
      }
    }
    render();
  }
}

function randomIDGenerate() {
  return "_" + Math.random().toString(36).substr(2, 9);
}

function refreshTask(id) {
  for (let i = 0; i < taskList.length; i++) {
    if (taskList[i].id === id) {
      taskList[i].isComplete = false; // Ï∑®ÏÜåÏÑ† Ï†úÍ±∞
      render();

      break;
    }
  }
}
